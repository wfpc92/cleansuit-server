#!/usr/bin/env node

var chalk = require('chalk');

var cluster = require('cluster');
var http = require('http');
var workers = process.env.WORKERS || require('os').cpus().length;

if (cluster.isMaster) {

    console.log(`Comenzando el Cluster [%s] con %s workers:`, process.pid, chalk.green(workers));

    var worker;
    for (var i = 0; i < workers; ++i) {
        worker = cluster.fork().process;
        console.log(`%s Instanciando Worker [%s]`, chalk.green('✓'), worker.pid);
    }

    cluster.on('exit', function(worker) {
        console.log(`%s Worker [%s] murió. Reiniciando...`, chalk.red('✗'), worker.process.pid);
        cluster.fork();
    });

} else {

    /**
     * Normalize a port into a number, string, or false.
     */
    var normalizePort = function(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) { // named pipe
            return val;
        }
        if (port >= 0) { // port number
            return port;
        }

        return false;
    };

    /**
     * Event listener for HTTP server "error" event.
     */
    var onError = function(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    };

    var runForkAfterAppInit = function(app) {
        // Get port from environment and store in Express.
        app.set('port', normalizePort(process.env.PORT || '20987'));

        // Create HTTP server.
        var server = http.createServer(app);
        var io = require("socket.io")(server);

        io.on("connection", function(socket) {
            //console.log("socket conectado... ", socket);
            console.log("nuevo sockt conectado", socket.id, app.get("port"));

            socket.on("dibujar", function(data) {
                socket.broadcast.emit("dibujar", data);
                //la diferencia entre socket.broadcast y io.sockets.emit es que broadcast no se envia a si mismo
                //mientras io.socket.emit se envia a todos los sockets conectados.
                
            })
        })
        // Listen on provided port, on all network interfaces.
        server.listen(app.get('port'), function() {
            console.log('%s Fork escuchando el puerto %d en modo: %s', chalk.green(`✓ [${process.pid}]`), app.get('port'), app.get('env'));
            // console.log('  Press CTRL-C to stop\n');
        });
        server.on('error', onError);
    };

    require('../app')(runForkAfterAppInit);
}


var nodemailer = require('nodemailer');
var sendmailTransport = require('nodemailer-sendmail-transport');

process.on('uncaughtException', function(err) {
    var d = new Date();
    console.error(d.toUTCString() + ' uncaughtException:', err.message);
    console.error(err.stack);

    var strErr = JSON.stringify(err);

    var opciones = {
        "from": "noreply@cleansuit.co",
        "to": "wfpantoja@gmail.com",
        "subject": "CleanSuit Crash!",
        "text": "",
        "html": "<h2>" + d.toUTCString() + " uncaughtException: " + err.message + "</h2>" +
            "<br/>" +
            "<pre>" + err.stack + "</pre>" +
            "<br/><br/>"
    };

    var transporter = nodemailer.createTransport(sendmailTransport({
        "path": "/usr/bin/sendmail",
        "args": ""
    }));
    transporter.sendMail(opciones, function(error, info) {
        process.exit(1);
    });
});
